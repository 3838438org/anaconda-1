#
# mk-images.sparc
#
# Copyright (C) 2008 Tom "spot" Callaway <tcallawa@redhat.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

SPARCMODS="openpromfs sermouse qlogicpti pluto fcal soc socal esp fc4 aic7xxx sym53c8xx qlogicisp mptbase mptscsih mptfc mptsas qla2xxx qla2100 qla2200 qla2300"
TILO=$IMGPATH/usr/bin/tilo
SILO=$IMGPATH/usr/sbin/silo

maketftp() {
    while [ x$(echo $1 | cut -c1-2) = x"--" ]; do
       if [ $1 = "--kernel" ]; then
           TFTPKERNEL=$2
           shift; shift
           continue
       elif [ $1 = "--initrdfrom" ]; then
           TFTPINITRD=$2
           shift; shift
           continue
       elif [ $1 = "--imagename" ]; then
           TFTPIMAGE=$2
           shift; shift
           continue
       elif [ $1 = "--systemmap" ]; then
           TFTPSYSMAP=$2
           shift; shift
           continue
       fi
       echo "bad argument $1 passed to maketftp"
       exit 1
    done

    elftoaout $TFTPKERNEL -o $TFTPIMAGE
    if [ "$KERNELARCH" = "sparc" ]; then
       piggyback $TFTPIMAGE $TFTPSYSMAP $TFTPINITRD
    elif [ "$KERNELARCH" = "sparc64" ]; then
       piggyback64 $TFTPIMAGE $TFTPSYSMAP $TFTPINITRD
    fi
}

prepareBootImage() {
	echo "sparc: prepareBootImage() is called"

        dd if=/dev/zero of=$MBD_TMPIMAGE bs=1k count=$BOOTDISKSIZE 2>/dev/null
        echo y | /sbin/mke2fs -b 1024 -r 0 -O none $MBD_TMPIMAGE  > /dev/null 2>/dev/null
	LODEV=`findloopdevice $MBD_TMPIMAGE`
	mount $LODEV -t ext2 $MBD_BOOTTREE
	cp $BOOTDISKDIR/fd.b $MBD_BOOTTREE
	cp $BOOTDISKDIR/second.b $MBD_BOOTTREE
	cp $BOOTDISKDIR/*.msg $stagedir
        mkdir -p $MBD_BOOTTREE/etc
	cp $BOOTDISKDIR/silo.conf $MBD_BOOTTREE/etc
	zcat $KERNELROOT/boot/vmlinuz-* | gzip -9 > $MBD_BOOTTREE/vmlinux.gz
	umount $LODEV
	losetup -d $LODEV
	mount -o loop -t ext2 $MBD_TMPIMAGE $MBD_BOOTTREE
	$SILO -r $MBD_BOOTTREE -i /fd.b -b /second.b -C /etc/silo.conf -F
}

makeBootImages() {
    echo "Building boot images for kernel $kernelvers.$KERNELARCH"

    mkdir -p $TOPDESTPATH/boot
    cp $BOOTDISKDIR/isofs.b $TOPDESTPATH/boot
    cp $BOOTDISKDIR/second.b $TOPDESTPATH/boot
    cp $BOOTDISKDIR/etc/silo.conf $TOPDESTPATH/boot    

    mkdir -p $TOPDESTPATH/etc
    cp $BOOTDISKDIR/*.msg $TOPDESTPATH/etc

    mkdir -p $TOPDESTPATH/kernels
    cp $KERNELROOT/boot/vmlinuz-* $TOPDESTPATH/kernels/vmlinux
    cp $KERNELROOT/boot/System.map-* $TOPDESTPATH/boot/System.map

    echo "List of init modules: $INITRDMODS $SPARCMODS"

    makeinitrd --initrdto $TOPDESTPATH/boot/initrd.img \
	--initrdsize 8192 \
	--loaderbin loader \
	--modules "$INITRDMODS $SPARCMODS"

    maketftp --kernel $TOPDESTPATH/boot/vmlinux \
	--imagename $TOPDESTPATH/images/tftp.img \
	--initrdfrom $TOPDESTPATH/boot/initrd.img \
	--systemmap $TOPDESTPATH/boot/System.map

}

doPostImages() {
	if [ -n "$BOOTISO" ]; then
		echo "Making $BOOTISO"
		mkisofs -R -J -T \
			-G /boot/isofs.b \
			-B ... \
			-s /boot/silo.conf \
			-r -V "PBOOT" -A "$PRODUCT $VERSION" \
			-x Fedora \
			-x repodata \
			-sparc-label "$PRODUCT $VERSION Boot Disc" -o $TOPDESTPATH/images/$BOOTISO $TOPDESTPATH
	fi
}
